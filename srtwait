#!/bin/bash

function print {
sed '1~2d' <(awk -v RS= '{gsub(/\n/, " ")}1' <(sed 's/..:..:..,... --> ..:..:..,...//' $1) )
}

function check(){
local OPTIND opt i
while getopts ":p:t:" opt; do
    case $opt in
        p)
#print out the subtitle lines and exit
            print $2
            exit 1
;;
        t) 
            beg=$(getfirsttime $2)
            end=$(getlasttime $2)
            echo $end - $beg | bc -l
            exit 1
            
    esac
done
shift $((OPTIND-1))
}

#Turn the given HHMMSSMilliseconds format into seconds
function getseconds {
awk -F: '{print ($1 * 3600 + $2 * 60 + $3 + $4 / 1000)}' <(grep -o $1 <(echo $line) )
}

function gettimestamps {
sed 's/,/\:/g' <(sed -n '/^..:..:..,... --> ..:..:..,...$/p' $1) 
}

function getfirsttime {
#like gettimestamps, but only gets the first timestamp
grep -o -m1 ^..:..:..:... <(gettimestamps $1) | awk -F: '{print ($1 * 3600 + $2 * 60 + $3 + $4 / 1000)}'
}

function getlasttime {
#like gettimestamps, but only gets the first timestamp
grep -o ^..:..:..:... <(gettimestamps $1) | awk -F: '{print ($1 * 3600 + $2 * 60 + $3 + $4 / 1000)}' | tail -1
}

check $@

#waits until the first timestamp
firsttime=$(getfirsttime $1)
# getfirsttime $1 will show the amount of seconds to wait
sleep $firsttime

paste <(gettimestamps $1 |
while read line
do
#Get the timestamps and then convert the HH:MM:SS:Milliseconds format into seconds.
begtime=$(getseconds ^..:..:..:...)
endtime=$(getseconds ..:..:..:...$) 
#Calculate the length of time to display that particular line
echo $endtime - $begtime | bc -l
done) <(print $1) |
#Loop through each lines, and display the subtitle line, then wait an amount of time equal to the number at the beginning of the line
while read line
do
awk -F' ' '{$1=""; print $0}'  <(echo $line)
time=$(awk -F' ' '{print $1}' <(echo $line))
sleep $time
done
